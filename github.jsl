//https://gist.github.com/joyrexus/85bf6b02979d8a7b0308
Names Default To Here( 1 );
New Namespace("github");

github:user="Bryan.Boone@jmp.com";
github:url="https://api.github.com";
github:encoded_password = "";

github:Basics = Function({},
	{Default Local},
	request = New HTTP Request(
		Method("GET"),
		URL(github:url || "/users/" || github:user),
	);
	data = request << Send;
	data;
);

github:Encode Password = Function({user = "", password = ""},
	{Default Local},
	New HTTP Request() << Encode64 Char(user || ":" ||password);
);

github:Decode Password = Function({encoded_password = ""},
	{Default Local},
	Words(New HTTP Request() << Decode64 Char(encoded_password), ":");
);

	
github:Password Prompt = Function({user = github:user, encoded_password = ""},
	{Default Local},
	If(encoded_password != "",
		parts = github:Decode Password(encoded_password);
		user = parts[1];
		password = parts[2];
		,
		password = "";
	);
	prompt = New Window( "Connect to GitHub",
		<<Modal,
		<<Return Result,
		V List Box(
			lineup = Lineup Box( N Col( 2 ), Spacing(10),
				Text Box( "User:" ),
				Text Box( user ),
				Text Box( "Password:" ),
				password_box = Text Edit Box( password, 
					<< Set Function(
						Function({this}, 
							btn_ok << Click
						)
					)
				),
				password_box << Password Style(1);

			),
			H List Box( btn_ok = Button Box( "OK" ), Button Box( "Cancel" ) )
		)
	);	
	prompt["password_box"];
);

github:Login = Function({},
	{Default Local},
	rc = 0;
	encoded_password = github:encoded_password;
	If(encoded_password == "",
		//prompt for password
		encoded_password = github:Password Prompt(user = github:user, encoded_password);
	);
	//try it out
	github:encoded_password = encoded_password;
	rc;
);

github:List Repository Files = Function({user = "", repo = "", branch = "main"},
	{Default Local},
	github:Login();
	request = New HTTP Request(
		Method("GET"),
		URL(github:url || "/repos/" || user || "/" || repo || "/contents"),
		Username(github:Decode Password(github:encoded_password)[1]),
		Password(github:Decode Password(github:encoded_password)[2]),
	);
	json = request << Send;
	files = {};
	If(request << Is Successful,
		json_jsl = ParseJSON(json);
		For(i = 1, i <= NItems(json_jsl), i++,
			Insert Into(files, json_jsl[i]["download_url"]);
		);
	);
	files;
);

github:List Repository Branches = Function({user = "", repo = ""},
	{Default Local},
	github:Login();
	request = New HTTP Request(
		Method("GET"),
		URL(github:url || "/repos/" || user || "/" || repo || "/branches"),
		Username(github:Decode Password(github:encoded_password)[1]),
		Password(github:Decode Password(github:encoded_password)[2]),
	);
	json = request << Send;
	branches = {};
	If(request << Is Successful,
		json_jsl = ParseJSON(json);
		For(i = 1, i <= NItems(json_jsl), i++,
			Insert Into(branches, json_jsl[i]["name"]);
		);
	);
	branches;
);

github:Clone = Function({user = "", repo = "", branch= "main", dest=""},
	{Default Local},
	github:Login();
	request = New HTTP Request(
		Method("GET"),
		URL(github:url || "/repos/" || user || "/" || repo || "/zipball/" || branch),
		Username(github:Decode Password(github:encoded_password)[1]),
		Password(github:Decode Password(github:encoded_password)[2]),
	);
	If(dest == "",
		dest = "$TEMP/";
	,
		Substitute Into(dest, "\", "/");
		If(!Ends With(dest, "/"),
			dest ||= "/";
		);
	);
	filename = request << Download(dest || "/" || repo || "_" || branch || ".zip", "replace");
	If(!File Exists(filename),
		filename = "";
	);
	if(filename != "",
		//unzip it
		za = Open( filename, "zip" );
		dir_list = za << dir;
		For(i = 1, i <= NItems(dir_list), i++,
			key = dir_list[i];
			Substitute Into(key, "\", "/");
			If(Ends With(key, "/"),
				Create Directory(key);
			,
				blob = za << read( key, Format( blob ) );
				Write("\!n" || dest || key);
				Save Text File( dest || key, blob );
			);
		);
	);
	filename;
);
user =  "bryanboone-jmp";
repository = "HTTP-Request-with-githib";
branch = "main";
clone_destination = "$Downloads";

branches = github:List Repository Branches(user, repository);
show(branches);

files = github:List Repository Files(user, repository, branch);
show(files);

file = github:Clone(user, repository, branch, "$Documents");
show(file);
